{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The base name to use for the resources that will be provisioned."
      }
    },
    "userClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the user bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "userClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the user bot Azure AD app."
      }
    },
    "authorClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the author bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "authorClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the author bot Azure AD app."
      }
    },
    "teamLink": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "URL link to the team of Administrators in Microsoft Teams, to which the app will send ERG approval and feedback notifications. This URL starts with https://teams.microsoft.com/l/team/"
      }
    },
    "ProactivelyInstallUserApp": {
      "defaultValue": true,
      "type": "Bool",
      "metadata": {
        "description": "If proactive app installation should be enabled."
      }
    },
    "UserAppExternalId": {
      "defaultValue": "fe0dfdaa-f1f7-4d85-9fd1-35b4edf4ffd1",
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "User app external ID."
      }
    },
    "DefaultCulture": {
      "defaultValue": "en-US",
      "allowedValues": [
        "en-US"
      ],
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "Default culture."
      }
    },
    "SupportedCultures": {
      "defaultValue": "en-US",
      "minLength": 1,
      "type": "String",
      "metadata": {
        "description": "Comma-delimited list of the supported cultures."
      }
    },
    "appDisplayName": {
      "type": "string",
      "defaultValue": "Group Connect",
      "minLength": 1,
      "metadata": {
        "description": "The app (and bot) display name."
      }
    },
    "appDescription": {
      "type": "string",
      "defaultValue": "Group Connect app template is meant to help customers discover and join employee groups in their organization, directly from Microsoft Teams",
      "minLength": 1,
      "metadata": {
        "description": "The app (and bot) description."
      }
    },
    "appIconUrl": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "https://raw.githubusercontent.com/OfficeDev/microsoft-teams-apps-diversityandinclusion/main/Manifest/color.png",
      "metadata": {
        "description": "The link to the icon for the app. It must resolve to a PNG file."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "",
      "minLength": 1,
      "maxLength": 36,
      "metadata": {
        "description": "The ID of the tenant to which the users access the bot, tab etc."
      }
    },
    "subscriptionTenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "minLength": 1,
      "maxLength": 36,
      "metadata": {
        "description": "The ID of the tenant to which the app will be deployed."
      }
    },
    "hostingPlanSku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "hostingPlanSize": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "2",
      "metadata": {
        "description": "The size of the hosting plan (small, medium, or large)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "qnaMakerSku": {
      "type": "string",
      "allowedValues": [
        "F0 (3 managed documents per month, 3 transactions per second, 100 transactions per minute, 50K transactions per month)",
        "S0 ($10 per month for unlimited documents, 3 transactions per second, 100 transactions per minute)"
      ],
      "defaultValue": "S0 ($10 per month for unlimited documents, 3 transactions per second, 100 transactions per minute)",
      "metadata": {
        "description": "The pricing tier for the QnAMaker service."
      }
    },
    "searchServiceSku": {
      "type": "string",
      "allowedValues": [
        "F (3 indexes)",
        "B (15 indexes)",
        "S (50 indexes)",
        "S2 (200 indexes)"
      ],
      "defaultValue": "B (15 indexes)",
      "metadata": {
        "description": "The pricing tier for the Azure Search service."
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL to the GitHub repository to deploy."
      },
      "defaultValue": "https://github.com/OfficeDev/microsoft-teams-apps-diversityandinclusion"
    },
    "releaseTag": {
      "type": "string",
      "metadata": {
        "description": "The release to deploy."
      },
      "defaultValue": "latest"
    }
  },
  "variables": {
    "botName": "[parameters('baseResourceName')]",
    "authorBotName": "[concat(parameters('baseResourceName'), '-author')]",
    "botAppName": "[parameters('baseResourceName')]",
    "botAppDomain": "[concat(variables('botAppName'), '.azurewebsites.net')]",
    "botAppUrl": "[concat('https://', variables('botAppDomain'))]",
    "hostingPlanName": "[parameters('baseResourceName')]",
    "storageAccountName": "[uniquestring(concat(resourceGroup().id, parameters('baseResourceName')))]",
    "appInsightsName": "[parameters('baseResourceName')]",
    "prepFunctionAppName": "[concat(parameters('baseResourceName'), '-prep-function')]",
    "sendFunctionAppName": "[concat(parameters('baseResourceName'), '-function')]",
    "dataFunctionAppName": "[concat(parameters('baseResourceName'), '-data-function')]",
    "serviceBusNamespaceName": "[parameters('baseResourceName')]",
    "serviceBusSendQueueName": "di-connect-send",
    "serviceBusDataQueueName": "di-connect-data",
    "serviceBusPrepareToSendQueueName": "di-connect-prep",
    "serviceBusExportQueueName": "di-connect-export",
    "serviceBusPairUpQueueName": "user-pairup-data",
    "keyVaultName": "[concat(variables('botAppName'), 'vault')]",
    "keyVaultUrl": "[concat('https://',variables('keyVaultName'), '.vault.azure.net')]",
    "qnaMakerAccountName": "[parameters('baseResourceName')]",
    "qnaMakerLocation": "westus",
    "qnaMakerAppServiceName": "[concat(parameters('baseResourceName'), '-qnamaker')]",
    "qnaMakerAppInsightsName": "[concat(parameters('baseResourceName'), '-qnamaker')]",
    "qnaMakerSkuValue": "[substring(parameters('qnaMakerSku'), 0, 2)]",
    "azureSearchName": "[concat(uniquestring(concat(resourceGroup().id, parameters('baseResourceName'))), '-search')]",
    "azureSearchSkus": {
      "F ": "free",
      "B ": "basic",
      "S ": "standard",
      "S2": "standard2"
    },
    "azureSearchSkuValue": "[variables('azureSearchSkus')[toUpper(substring(parameters('searchServiceSku'), 0, 2))]]",
    "defaultSASKeyName": "RootManageSharedAccessKey",
    "authRuleResourceId": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('serviceBusNamespaceName'), variables('defaultSASKeyName'))]",
    "sharedSkus": [
      "Free",
      "Shared"
    ],
    "isSharedPlan": "[contains(variables('sharedSkus'), parameters('hostingPlanSku'))]",
    "skuFamily": "[if(equals(parameters('hostingPlanSku'), 'Shared'), 'D', take(parameters('hostingPlanSku'), 1))]",
    "ProactivelyInstallUserApp": "[parameters('ProactivelyInstallUserApp')]",
    "UserAppExternalId": "[parameters('UserAppExternalId')]",
    "i18n:DefaultCulture": "[parameters('DefaultCulture')]",
    "i18n:SupportedCultures": "[parameters('SupportedCultures')]",
    "sendFunctionPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/sendFunctionPackage.zip')]",
    "dataFunctionPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/dataFunctionPackage.zip')]",
    "prepFunctionPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/prepFunctionPackage.zip')]",
    "botAppPackageURL": "[concat(parameters('gitRepoUrl'), '/releases/', parameters('releaseTag'), '/download/botAppPackage.zip')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2019-06-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false
      },
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "hostingEnvironment": "",
        "numberOfWorkers": 1
      },
      "sku": {
        "name": "[if(variables('isSharedPlan'), concat(variables('skuFamily'), '1'), concat(variables('skuFamily'), parameters('hostingPlanSize')))]",
        "tier": "[parameters('hostingPlanSku')]",
        "size": "[concat(variables('skuFamily'), parameters('hostingPlanSize'))]",
        "family": "[variables('skuFamily')]",
        "capacity": 0
      }
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('botAppName')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[parameters('location')]",
      "kind": "app",
      "properties": {
        "name": "[variables('botAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "enabled": true,
        "reserved": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "PROJECT",
              "value": "Source/DIConnect/Microsoft.Teams.Apps.DIConnect.csproj"
            },
            {
              "name": "SITE_ROLE",
              "value": "app"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "ProactivelyInstallUserApp",
              "value": "[variables('ProactivelyInstallUserApp')]"
            },
            {
              "name": "UserAppExternalId",
              "value": "[variables('UserAppExternalId')]"
            },
            {
              "name": "AzureAd:TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "AzureAd:ClientId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AzureAd:ClientSecret",
              "value": "[parameters('authorClientSecret')]"
            },
            {
              "name": "AzureAd:ApplicationIdURI",
              "value": "[concat('api://', variables('botAppDomain'))]"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": ""
            },
            {
              "name": "AuthorAppId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AuthorAppPassword",
              "value": ""
            },
            {
              "name": "ManifestId",
              "value": "[variables('UserAppExternalId')]"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": ""
            },
            {
              "name": "ServiceBusConnection",
              "value": ""
            },
            {
              "name": "AllowedTenants",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "DisableTenantFilter",
              "value": "false"
            },
            {
              "name": "AppBaseUri",
              "value": "[concat('https://', variables('botAppDomain'))]"
            },
            {
              "name": "AdminTeamLink",
              "value": "[parameters('teamLink')]"
            },
            {
              "name": "DisableAuthentication",
              "value": "false"
            },
            {
              "name": "QnAMakerHostUrl",
              "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))).hostNames[0])]"
            },
            {
              "name": "ScoreThreshold",
              "value": "0.5"
            },
            {
              "name": "QnAMakerSubscriptionKey",
              "value": ""
            },
            {
              "name": "QnAMakerApiEndpointUrl",
              "value": "https://westus.api.cognitive.microsoft.com"
            },
            {
              "name": "UseKeyVault",
              "value": true
            },
            {
              "name": "KeyVault:BaseUrl",
              "value": "[variables('keyVaultUrl')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "12.18.0"
            }
          ],
          "cors": {
            "supportCredentials": true,
            "allowedOrigins": [
              "[concat('https://', variables('botAppDomain'))]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]",
        "[resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts/', variables('qnaMakerAccountName'))]",
        "[resourceId('Microsoft.Web/sites', variables('prepFunctionAppName'))]",
        "[resourceId('Microsoft.Web/sites', variables('sendFunctionAppName'))]",
        "[resourceId('Microsoft.Web/sites', variables('dataFunctionAppName'))]"
      ],
      "resources": [
        {
          "name": "MSDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('botAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('botAppPackageURL')]"
          }
        }
      ]
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "QnAMaker",
      "name": "[variables('qnaMakerAccountName')]",
      "apiVersion": "2017-04-18",
      "location": "[variables('qnaMakerLocation')]",
      "sku": {
        "name": "[variables('qnaMakerSkuValue')]"
      },
      "properties": {
        "apiProperties": {
          "qnaRuntimeEndpoint": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))).hostNames[0])]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('qnaMakerAppServiceName'))]",
        "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]",
        "[resourceId('microsoft.insights/components/', variables('qnaMakerAppInsightsName'))]"
      ]
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      }
    },
    {
      "apiVersion": "2018-07-12",
      "name": "[variables('botName')]",
      "type": "Microsoft.BotService/botServices",
      "location": "global",
      "sku": {
        "name": "F0"
      },
      "kind": "sdk",
      "properties": {
        "displayName": "[parameters('appDisplayName')]",
        "description": "[parameters('appDescription')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('userClientId')]",
        "endpoint": "[concat(variables('botAppUrl'), '/api/messages/user')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('botName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('botName'))]"
          ]
        }
      ]
    },
    {
      "apiVersion": "2018-07-12",
      "name": "[variables('authorBotName')]",
      "type": "Microsoft.BotService/botServices",
      "location": "global",
      "sku": {
        "name": "F0"
      },
      "kind": "sdk",
      "properties": {
        "displayName": "[concat(parameters('appDisplayName'),'-author')]",
        "description": "[parameters('appDescription')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('authorClientId')]",
        "endpoint": "[concat(variables('botAppUrl'), '/api/messages/author')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('authorBotName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('authorBotName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[variables('serviceBusNamespaceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "resources": [
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusSendQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusDataQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusPrepareToSendQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusExportQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        },
        {
          "type": "Queues",
          "apiVersion": "2017-04-01",
          "name": "[variables('serviceBusPairUpQueueName')]",
          "dependsOn": [
            "[concat('Microsoft.ServiceBus/namespaces/', variables('serviceBusNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M",
            "maxSizeInMegabytes": 1024,
            "requiresDuplicateDetection": false,
            "requiresSession": false,
            "defaultMessageTimeToLive": "P14D",
            "deadLetteringOnMessageExpiration": false,
            "enableBatchedOperations": true,
            "duplicateDetectionHistoryTimeWindow": "PT10M",
            "maxDeliveryCount": 10,
            "status": "Active",
            "enablePartitioning": false,
            "enableExpress": false
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('prepFunctionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('prepFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "ProactivelyInstallUserApp",
              "value": "[variables('ProactivelyInstallUserApp')]"
            },
            {
              "name": "UserAppExternalId",
              "value": "[variables('UserAppExternalId')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('prepFunctionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "AuthorAppId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AuthorAppPassword",
              "value": "[parameters('authorClientSecret')]"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": "[parameters('userClientSecret')]"
            },
            {
              "name": "TenantId",
              "value": "[parameters('tenantId')]"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ],
      "resources": [
        {
          "name": "ZipDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('prepFunctionAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('prepFunctionPackageURL')]"
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('sendFunctionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('sendFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [           
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('sendFunctionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "MaxNumberOfAttempts",
              "value": "5"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": "[parameters('userClientSecret')]"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ],
      "resources": [
        {
          "name": "ZipDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('sendFunctionAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('sendFunctionPackageURL')]"
          }
        }
      ]
    },
    {
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('dataFunctionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "name": "[variables('dataFunctionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "appSettings": [
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SITE_ROLE",
              "value": "function"
            },
            {
              "name": "i18n:DefaultCulture",
              "value": "[variables('i18n:DefaultCulture')]"
            },
            {
              "name": "i18n:SupportedCultures",
              "value": "[variables('i18n:SupportedCultures')]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('dataFunctionAppName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "AuthorAppId",
              "value": "[parameters('authorClientId')]"
            },
            {
              "name": "AuthorAppPassword",
              "value": "[parameters('authorClientSecret')]"
            },
            {
              "name": "UserAppId",
              "value": "[parameters('userClientId')]"
            },
            {
              "name": "UserAppPassword",
              "value": "[parameters('userClientSecret')]"
            },
            {
              "name": "CleanUpScheduleTriggerTime",
              "value": "30 23 * * *"
            },
            {
              "name": "CleanUpFile",
              "value": "1"
            },
            {
              "name": "StorageAccountConnectionString",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
            },
            {
              "name": "ServiceBusConnection",
              "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]"
      ],
      "resources": [
        {
          "name": "ZipDeploy",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', variables('dataFunctionAppName'))]"
          ],
          "properties": {
            "packageUri": "[variables('dataFunctionPackageURL')]"
          }
        }
      ]
    },
    {
      "name": "[variables('azureSearchName')]",
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2015-08-19",
      "location": "[parameters('location')]",
      "tags": {
        "isqnamaker": "true"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default"
      },
      "sku": {
        "name": "[toLower(variables('azureSearchSkuValue'))]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2016-08-01",
      "name": "[variables('qnaMakerAppServiceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabled": true,
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          }
        },
        "name": "[variables('qnaMakerAppServiceName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
        "hostingEnvironment": ""
      },
      "tags": {
        "isqnamaker": "true",
        "[concat('hidden-related:', '/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "resources": [
        {
          "name": "[variables('qnaMakerAppInsightsName')]",
          "type": "microsoft.insights/components",
          "kind": "web",
          "apiVersion": "2015-05-01",
          "location": "[parameters('location')]",
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Web/sites/', variables('qnaMakerAppServiceName')))]": "Resource"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('qnaMakerAppServiceName'))]"
          ],
          "properties": {
            "ApplicationId": "[variables('qnaMakerAppServiceName')]"
          }
        },
        {
          "apiVersion": "2015-08-01",
          "name": "appsettings",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('qnaMakerAppServiceName'))]",
            "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]"
          ],
          "properties": {
            "AzureSearchName": "[variables('azureSearchName')]",
            "AzureSearchAdminKey": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('azureSearchName')), '2015-08-19').primaryKey]",
            "UserAppInsightsKey": "[reference(resourceId('Microsoft.Insights/components/', variables('qnaMakerAppInsightsName')), '2015-05-01').InstrumentationKey]",
            "UserAppInsightsName": "[variables('qnaMakerAppInsightsName')]",
            "UserAppInsightsAppId": "[reference(resourceId('Microsoft.Insights/components/', variables('qnaMakerAppInsightsName')), '2015-05-01').AppId]",
            "PrimaryEndpointKey": "[concat(variables('qnaMakerAppServiceName'), '-PrimaryEndpointKey')]",
            "SecondaryEndpointKey": "[concat(variables('qnaMakerAppServiceName'), '-SecondaryEndpointKey')]",
            "DefaultAnswer": "No good match found in KB.",
            "QNAMAKER_EXTENSION_VERSION": "latest"
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('botAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('serviceBusNamespaceName'))]",
        "[resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts/', variables('qnaMakerAccountName'))]"
      ],
      "tags": {
        "displayName": "KeyVault"
      },
      "properties": {
        "tenantId": "[parameters('subscriptionTenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[parameters('subscriptionTenantId')]",
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('botAppName')), '2018-02-01', 'Full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get"
              ]
            }
          }
        ],
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultName'), '/', 'AuthorAppPassword')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('authorClientSecret')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultName'), '/', 'UserAppPassword')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('userClientSecret')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultName'), '/','StorageAccountConnectionString--SecretKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultName'), '/','ServiceBusConnection--SecretKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[concat(variables('keyVaultName'), '/','QnAMakerSubscriptionKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts/', variables('qnaMakerAccountName')), '2017-04-18').key1]"
      }
    }
  ],
  "outputs": {
    "authorBotId": {
      "type": "string",
      "value": "[parameters('authorClientId')]"
    },
    "userBotId": {
      "type": "string",
      "value": "[parameters('userClientId')]"
    },
    "appDomain": {
      "type": "string",
      "value": "[concat('Please create a custom domain name for ', variables('botAppDomain'), ' and use that in the manifest')]"
    }
  }
}